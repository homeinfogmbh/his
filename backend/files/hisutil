#! /usr/bin/env python3
"""hisutil.

Manage HIS settings.

Usage:
    hisutil account add <name> <email> <customer> [--passwd=<passwd>] \
[--admin] [--root]
    hisutil service add <name> [--description=<description>] [--promote]
    hisutil service <service> add-customer <customer>[--begin=<begin>] \
[--end=<end>] [--date-format=<date_format>]
    hisutil service <service> add-account <account>

Options:
    --passwd                        Reads the desired password from a prompt.
    --admin                         Makes the account an administrator.
    --root                          Makes the account a root account.
    --description=<description>     Specified the service's description.
    --promote                       Flags to promote the service.
    --begin=<begin>                 Sets the begin date and time for
                                    service validity.
    --end=<end>                     Sets the end date and time for
                                    service validity.
    --date-format=<date_format>     Sets the date format for the specified date
                                    and time [default: %Y-%m-%dT%H:%M:%S].
    --help                          Print this page.
"""
from datetime import datetime
from getpass import getpass
from random import choice
from string import digits, ascii_letters
from sys import exit as exit_, stderr

from docopt import docopt

from mdb import Customer

from his.orm import ServiceExistsError, AccountExistsError, Account, Service, \
    CustomerService, AccountService


def read_passwd():
    """Reads a password."""

    while True:
        try:
            passwd = getpass('Password: ')
        except EOFError:
            continue

        try:
            repeat = getpass('Repeat password: ')
        except EOFError:
            continue

        if passwd == repeat:
            return passwd

        print('Passwords do not match.', file=stderr)
        continue


def randchars(count, pool=digits + ascii_letters):
    """Yields random chars from the pool."""

    for _ in range(count):
        yield choice(pool)


def genpw(length=16, pool=digits + ascii_letters):
    """Generates a safe, radom password."""

    return ''.join(randchars(length, pool=pool))


def get_account(name):
    """Gets an account by its name."""

    try:
        return Account.get(Account.name == name)
    except Account.DoesNotExist:
        print('No such account: {}.'.format(name))
        exit_(2)


def get_customer(customer):
    """Gets the customer from the customer's id as a string."""

    try:
        customer = int(customer)
    except ValueError:
        print('Invalid customer ID: {}.'.format(customer), file=stderr)
        exit_(1)

    try:
        return Customer.get(Customer.id == customer)
    except Customer.DoesNotExist:
        print('No such customer: {}.'.format(customer), file=stderr)
        exit_(2)


def get_service(name):
    """Returns the respective service."""

    try:
        return Service.get(Service.name == name)
    except Service.DoesNotExist:
        print('No such service: "{}".'.format(name), file=stderr)
        exit_(4)


def add_account(options):
    """Adds the respective account."""

    if options['--passwd']:
        try:
            passwd = read_passwd()
        except KeyboardInterrupt:
            print('Aborted by user.', file=stderr)
            exit_(1)

    if not passwd:
        passwd = genpw()
        print('Generated password: {}'.format(passwd))

    customer = get_customer(options['<customer>'])

    try:
        account = Account.add(
            customer, options['<name>'], options['<email>'], passwd=passwd,
            admin=options['--admin'], root=options['--root'])
    except AccountExistsError as account_exists:
        print('Account already exists for field "{}".'.format(
            account_exists.field), file=stderr)
        exit_(3)

    account.save()  # Account.add() does not perform save().
    print(account)


def add_service(options):
    """Adds a new service."""

    try:
        service = Service.add(
            options['<name>'], description=options['--description'],
            promote=options['--promote'])
    except ServiceExistsError:
        print('Service already exists.', file=stderr)
        exit_(1)

    service.save()
    print('Service added.')


def add_customer_service(options):
    """Adds a new customer-service mapping."""

    date_format = options['--date-format']
    begin = options['--begin']

    if begin is not None:
        begin = datetime.strptime(begin, date_format)

    end = options['--end']

    if end is not None:
        end = datetime.strptime(end, date_format)

    customer = get_customer(options['<customer>'])
    service = get_service(options['<service>'])

    try:
        customer_service = CustomerService.get(
            (CustomerService.customer == customer) &
            (CustomerService.service == service))
    except CustomerService.DoesNotExist:
        customer_service = CustomerService.add(
            customer, service, begin=begin, end=end)
        customer_service.save()

    print(customer_service)


def add_account_service(options):
    """Adds a new account-service mapping."""

    account = get_account(options['<account>'])
    service = get_service(options['<service>'])

    try:
        account_service = AccountService.get(
            (AccountService.account == account) &
            (AccountService.service == service))
    except AccountService.DoesNotExist:
        account_service = AccountService.add(account, service)
        account_service.save()

    print(account_service)


def main(options):
    """Runs the HIS utility."""

    if options['account']:
        if options['add']:
            add_account(options)
    elif options['service']:
        if options['add']:
            add_service(options)
        elif options['add-customer']:
            add_customer_service(options)
        elif options['add-account']:
            add_account_service(options)


if __name__ == '__main__':
    main(docopt(__doc__))
