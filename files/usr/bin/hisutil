#! /usr/bin/env python3
"""hisutil

Manage HIS settings.

Usage:
    hisutil -Aa <name> <email> <customer> [--passwd=<passwd>]
    hisutil -CSa <customer> <service> [--begin=<begin>] \
[--end=<end>] [--date-format=<date_format>]
    hisutil -ASa <account> <service>

Options:
    --account, -A                       Operate on accounts.
    --service, -S                       Operate on services.
    --customer, -C                      Operate on customers.
    --add, -a                           Perform adding.
    --delete, -d                        Perform deletion.
    --passwd=<passwd>                   Sets the desired password.
    --begin=<begin>                     Sets the begin date and time for \
service validity.
    --end=<end>                         Sets the end date and time for \
service validity.
    --date-format=<date_format>         Sets the date format for the \
specified date and time [default: %Y-%m-%dT%H:%M:%S].
    --help                              Print this page.
"""
from itertools import chain
from random import choice
from string import digits, ascii_letters
from sys import stderr

from peewee import DoesNotExist

from homeinfo.crm import Customer, Employee
from his.orm import Account, Service, CustomerService, AccountService


def randchars(count, pool=None):
    """Yields random chars from the pool"""

    if pool is None:
        pool = digits + ascii_letters

    for _ in range(count):
        yield choice(pool)


def genpw(length=16, pool=None):
    """Generates a safe, radom password"""

    return ''.join(randchars(length, pool=pool))


def get_customer(customer):
    """Gets the customer from the customer's id as a string"""

    try:
        customer = int(customer)
    except ValueError:
        print('Invalid customer ID: {}.'.format(customer), file=stderr)
        exit(1)
    else:
        try:
            return Customer.get(Customer.id == customer)
        except DoesNotExist:
            print('No such customer: {}.'.format(customer), file=stderr)
            exit(2)


def get_account(name):
    """Gets an account by its name"""

    try:
        return Account.get(Account.name == name)
    except DoesNotExist:
        print('No such account: {}.'.format(name))
        exit(2)


def add_account(customer, name, email, passwd):
    """Adds the respective account"""

    if not passwd:
        passwd = genpw()
        print('Generated password: {}'.format(passwd))

    try:
        account = Account.add(
            get_customer(customer), name, email, passwd=passwd)
    except AccountExists as e:
        print('Account already exists for field "{}".'.format(e.field),
              file=stderr)
        exit(3)
    else:
        account.save()  # Account.add() does not perform save()
        print(account)


def get_service(name):
    """Returns the respective service"""

    try:
        return Service.get(Service.name == name)
    except DoesNotExist:
        print('No such service: "{}".'.format(name), file=stderr)
        exit(4)


def add_customer_service(customer, service, begin, end, date_format):
    """Adds a new customer-service mapping"""

    if begin is not None:
        begin = datetime.strptime(begin, date_format)

    if end is not None:
        end = datetime.strptime(end, date_format)

    customer = get_customer(customer)
    service = get_service(service)

    try:
        customer_service = CustomerService.get(
            (CustomerService.customer == customer) &
            (CustomerService.service == service))
    except DoesNotExist:
        customer_service = CustomerService.add(
            customer, service, begin=begin, end=end)
        customer_service.save()

    print(customer_service)


def add_account_service(account, service):
    """Adds a new account-service mapping"""

    account = get_account(account)
    service = get_service(service)

    try:
        account_service = AccountService.get(
            (AccountService.account == account) &
            (AccountService.service == service))
    except DoesNotExist:
        account_service = AccountService.add(account, service)
        account_service.save()

    print(account_service)


if __name__ == '__main__':
    from docopt import docopt
    options = docopt(__doc__)
    customer = options['--customer']
    account = options['--account']
    service = options['--service']
    add = options['--add']
    delete = options['--delete']

    if account:
        if service:
            if add:
                account = options['<account>']
                service = options['<service>']
                add_account_service(options['<account>'], options['<service>'])
        elif add:
            add_account(
                options['<customer>'], options['<name>'], options['<email>'],
                options['<passwd>'])
    elif customer:
        if service:
            if add:
                customer = options['<customer>']
                service = options['<service>']
                add_customer_service(
                    options['<customer>'], options['<service>'],
                    options['--begin'], options['--end'],
                    options['--date-format'])
